@using Deepo.Client.Web.Dto

@if (_releaseResult == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else if (_releaseResult != null && _releaseResult.IsFailed)
{
    <MudText>Oops, something went wrong</MudText>
}
else if (_releaseResult != null && _releaseResult.Content != null)
{
    <MudGrid  Justify=" Justify.FlexStart">
        <MudItem lg="6">
            <MudImage Elevation="2" Width="250" Height="250" Src="@(!String.IsNullOrEmpty(_releaseResult.Content?.CoverUrl) ? _releaseResult.Content.CoverUrl: "/images/unavailable.svg")" />
        </MudItem>
        <MudItem Class="my-4" lg="6">

            <MudItem lg="12" Class="d-flex align-start">
                <MudText Typo="Typo.body2" Class="w-25">Album:</MudText>
                <MudText Typo="Typo.body2">@_releaseResult.Content.Name</MudText>
            </MudItem>

            <MudItem lg="12" Class="d-flex align-start">
                <MudText Typo="Typo.body2"  Class="w-25">Artist:</MudText>
                <MudText Typo="Typo.body2">@_releaseResult.Content.AuthorsNames</MudText>
            </MudItem>

            <MudItem lg="12" Class="d-flex align-start">
                <MudText Typo="Typo.body2" Class="w-25">Release:</MudText>
                <MudText Typo="Typo.body2">@_releaseResult.Content.ReleaseDate</MudText>
            </MudItem>

            <MudItem lg="12" Class="d-flex align-start">
                <MudText Typo="Typo.body2" Class="w-25">Label:</MudText>
                <MudText Typo="Typo.body2">@_releaseResult.Content.Label</MudText>
            </MudItem>

            <MudItem lg="12" Class="d-flex align-start">
                <MudText Typo="Typo.body2" Class="w-25">Genre:</MudText>
                <MudText Typo="Typo.body2">@String.Join(", ", _releaseResult.Content.Genres.Select(x => x.Value))</MudText>
            </MudItem>

        </MudItem>
    </MudGrid>
}


@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Inject]
    private IHttpService? HttpService { get; set; }

    [Parameter]
    public Guid Vinyl_ID { get; set; }

    private DtoResult<ReleaseVinylExDto>? _releaseResult;

    protected async override void OnInitialized()
    {
        await GetReleasesAsync().ConfigureAwait(false);
    }


    private async Task GetReleasesAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpService);

        string query = $"/vinyl/{Vinyl_ID}";
        OperationResult<string> httpResult = await HttpService.GetAsync(query, CancellationToken.None).ConfigureAwait(false);

        if (httpResult != null)
        {
            _releaseResult = JsonConvert.DeserializeObject<DtoResult<ReleaseVinylExDto>>(httpResult.Content);
        }
        StateHasChanged();
    }
}
